stages:
  - prepare_files
  - base64_conversion
  - push_to_aws  # New stage for pushing secrets to AWS Secrets Manager

# The prepare_files stage where certificate renaming happens
prepare_files:
  stage: prepare_files
  script:
    - echo "Preparing files and renaming certificates..."
    - # Place your certificate renaming logic here
  artifacts:
    paths:
      - certificate/renamed/*.p12  # Store the renamed files as artifacts
    expire_in: 1 hour  # Define how long the artifacts will be available

# The base64_conversion stage where the .p12 certificates are converted to Base64
base64_conversion:
  stage: base64_conversion  # This stage runs after prepare_files
  script:
    - echo "Converting .p12 certificates to Base64..."
    - mkdir -p certificate/base64-encoded  # Create the folder if it doesn't exist
    - for cert_file in certificate/renamed/*.p12; do
        file_name=$(basename "$cert_file");
        echo "Processing file: $file_name";
        base64 "$cert_file" | tr -d '\n' > "certificate/base64-encoded/${file_name%.p12}.b64";
        echo "Base64 encoded certificate saved to certificate/base64-encoded/${file_name%.p12}.b64";
      done
  artifacts:
    paths:
      - certificate/base64-encoded/*.b64  # Store the Base64 encoded files as artifacts

# The push_to_aws stage to push the secret to AWS Secrets Manager
push_to_aws:
  stage: push_to_aws
  script:
    - echo "Pushing certificates and passwords to AWS Secrets Manager..."

    # Define the AWS secret name (replace with actual secret name pattern)
    secret_name="my-sectrans-${CURRENT_ENV}.TO.${folder}"

    # Construct the password variable name based on the secret name
    password_var="${secret_name#my-sectrans-}"
    password_var="${password_var//./_}"

    # Fetch the password from GitLab CI/CD environment variables
    password=$(echo $CI_JOB_TOKEN | jq -r ".${password_var}")
    
    if [ -z "$password" ]; then
      echo "No password found matching $password_var. Skipping secret push."
      exit 1  # Exit if password is not found
    fi

    # Fetch the corresponding Base64 encoded certificate
    cert_file="certificate/base64-encoded/${password_var}.b64"
    
    if [ ! -f "$cert_file" ]; then
      echo "No Base64 encoded certificate found for $password_var. Skipping secret push."
      exit 1  # Exit if certificate is not found
    fi

    # Read the Base64 certificate content
    base64_cert_content=$(cat "$cert_file")

    # Create a JSON payload to push to AWS Secrets Manager
    json_payload=$(jq -n --arg password "$password" --arg cert_content "$base64_cert_content" \
      '{password: $password, certificate: $cert_content}')

    # Push the secret to AWS Secrets Manager
    aws secretsmanager create-secret \
      --name "$secret_name" \
      --secret-string "$json_payload" \
      --region $AWS_REGION

    echo "Secret pushed to AWS Secrets Manager: $secret_name"
  dependencies:
    - base64_conversion  # This job depends on the base64_conversion stage to access the Base64 encoded certificates
  environment:
    name: production
  only:
    - main  # Or specify the branch you want to push secrets from (e.g., `only: - master`)
