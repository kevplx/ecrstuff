# Iterate over each repository
for REPO in $REPOS; do
    # Get list of image tags in the repository
    echo "Retrieving image tags for repository: $REPO..."
    IMAGE_TAGS=$(aws ecr list-images --repository-name $REPO --query 'imageIds[*].imageTag' --output text)
    # If no image tags are present, set IMAGE_TAGS to "none"
    if [[ -z "$IMAGE_TAGS" ]]; then
        IMAGE_TAGS="none"
    fi
    # Iterate over each image tag
    for FULL_IMAGE_TAG in $IMAGE_TAGS; do
        # Split the full image tag into separate tags based on comma delimiter
        IFS=',' read -r -a IMAGE_TAG_ARRAY <<< "$FULL_IMAGE_TAG"
        # Iterate over each separated image tag
        for IMAGE_TAG in "${IMAGE_TAG_ARRAY[@]}"; do
            # Check if the image tag is unused
            if ! [[ " ${USED_IMAGES[@]} " =~ " $REPO:$IMAGE_TAG " ]]; then
                echo "Unused Image: $REPO:$IMAGE_TAG"
                # Append unused image to the output file
                echo "$REPO:$IMAGE_TAG" >> unused_images.txt
            fi
        done
    done
done


IMAGE_TAGS=$(aws ecr list-images --repository-name $REPO --query "imageIds[?ends_with(@, '-SNAPSHOT') || ends_with(@, '-RELEASE')].imageTag" --output text)

          FILTERED_IMAGE_TAGS=$(echo "$IMAGE_TAGS" | grep -E '[-](SNAPSHOT|RELEASE)$')


stages:
  - list_image

list_image:
  stage: list_image
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
    - |
      ECR_NAMESPACE="kc-abc"
      REPOS=$(aws ecr describe-repositories --repository-names $(aws ecr describe-repositories --query "repositories[].repositoryName" --output text) --query "repositories[].repositoryName" --output text | grep "^$ECR_NAMESPACE")
      for REPO in $REPOS; do
          # Get list of image tags in the repository
          echo "Retrieving image tags for repository: $REPO..."
          IMAGE_TAGS=$(aws ecr list-images --repository-name $REPO --query 'imageIds[*].imageTag' --output text)
          # If no image tags are present, set IMAGE_TAGS to "none"
          if [[ -z "$IMAGE_TAGS" ]]; then
              IMAGE_TAGS="none"
          fi
          # Filter image tags ending with -SNAPSHOT or -RELEASE
          FILTERED_IMAGE_TAGS=$(echo "$IMAGE_TAGS" | grep -E '[-](SNAPSHOT|RELEASE)$')
          # Iterate over each filtered image tag
          while IFS= read -r IMAGE_TAG; do
              # Check if the image tag is unused
              if ! [[ " ${USED_IMAGES[@]} " =~ " $REPO:$IMAGE_TAG " ]]; then
                  echo "Unused Image: $REPO:$IMAGE_TAG"
                  # Append unused image to the output file
                  echo "$REPO:$IMAGE_TAG" >> unused_images.txt
              fi
          done <<< "$FILTERED_IMAGE_TAGS"
      done

stages:
  - list_image

list_image:
  stage: list_image
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
    - |
      ECR_NAMESPACE="kc-abc"
      REPOS=$(aws ecr describe-repositories --repository-names $(aws ecr describe-repositories --query "repositories[].repositoryName" --output text) --query "repositories[].repositoryName" --output text | grep "^$ECR_NAMESPACE")
      for REPO in $REPOS; do
          # Get list of image tags in the repository
          echo "Retrieving image tags for repository: $REPO..."
          IMAGE_TAGS=$(aws ecr list-images --repository-name $REPO --query 'imageIds[*].imageTag' --output text)
          # If no image tags are present, set IMAGE_TAGS to "none"
          if [[ -z "$IMAGE_TAGS" ]]; then
              IMAGE_TAGS="none"
          fi
          # Iterate over each image tag
          for IMAGE_TAG in $IMAGE_TAGS; do
              # Check if the image tag ends with -SNAPSHOT or -RELEASE
              if [[ "$IMAGE_TAG" == *-SNAPSHOT || "$IMAGE_TAG" == *-RELEASE ]]; then
                  # Check if the image tag is unused
                  if ! [[ " ${USED_IMAGES[@]} " =~ " $REPO:$IMAGE_TAG " ]]; then
                      echo "Unused Image: $REPO:$IMAGE_TAG"
                      # Append unused image to the output file
                      echo "$REPO:$IMAGE_TAG" >> unused_images.txt
                  fi
              fi
          done
      done

stages:
  - list_image

list_image:
  stage: list_image
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
    - |
      ECR_NAMESPACE="kc-abc"
      REPOS=$(aws ecr describe-repositories --repository-names $(aws ecr describe-repositories --query "repositories[].repositoryName" --output text) --query "repositories[].repositoryName" --output text | grep "^$ECR_NAMESPACE")
      for REPO in $REPOS; do
          # Get list of image tags in the repository
          echo "Retrieving image tags for repository: $REPO..."
          IMAGE_TAGS=$(aws ecr list-images --repository-name $REPO --query 'imageIds[*].imageTag' --output text)
          # If no image tags are present, set IMAGE_TAGS to "none"
          if [[ -z "$IMAGE_TAGS" ]]; then
              IMAGE_TAGS="none"
          fi
          # Iterate over each image tag
          for FULL_IMAGE_TAG in $IMAGE_TAGS; do
              # Split the full image tag into separate tags based on comma delimiter
              IFS=',' read -r -a IMAGE_TAG_ARRAY <<< "$FULL_IMAGE_TAG"
              # Iterate over each separated image tag
              for FULL_IMAGE_TAG in "${IMAGE_TAG_ARRAY[@]}"; do
                  # Extract the part of the image tag that doesn't contain the word "expire"
                  IMAGE_TAG=$(echo "$FULL_IMAGE_TAG" | sed 's/,[^,]*expire[^,]*//')
                  # Check if the image tag ends with -SNAPSHOT or -RELEASE
                  if [[ "$IMAGE_TAG" == *-SNAPSHOT || "$IMAGE_TAG" == *-RELEASE ]]; then
                      # Check if the image tag is unused
                      if ! [[ " ${USED_IMAGES[@]} " =~ " $REPO:$IMAGE_TAG " ]]; then
                          echo "Unused Image: $REPO:$IMAGE_TAG"
                          # Append unused image to the output file
                          echo "$REPO:$IMAGE_TAG" >> unused_images.txt
                      fi
                  fi
              done
          done
      done


stages:
  - list_image

list_image:
  stage: list_image
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
    - |
      ECR_NAMESPACE="kc-abc"
      REPOS=$(aws ecr describe-repositories --repository-names $(aws ecr describe-repositories --query "repositories[].repositoryName" --output text) --query "repositories[].repositoryName" --output text | grep "^$ECR_NAMESPACE")
      for REPO in $REPOS; do
          # Get list of image tags in the repository
          echo "Retrieving image tags for repository: $REPO..."
          IMAGE_TAGS=$(aws ecr list-images --repository-name $REPO --query 'imageIds[*].imageTag' --output text)
          # If no image tags are present, set IMAGE_TAGS to "none"
          if [[ -z "$IMAGE_TAGS" ]]; then
              IMAGE_TAGS="none"
          fi
          # Iterate over each image tag
          for FULL_IMAGE_TAG in $IMAGE_TAGS; do
              # Extract the first part of the image tag before any comma
              IMAGE_TAG=$(echo "$FULL_IMAGE_TAG" | cut -d "," -f 1)
              # Check if the image tag ends with -SNAPSHOT or -RELEASE
              if [[ "$IMAGE_TAG" == *-SNAPSHOT || "$IMAGE_TAG" == *-RELEASE ]]; then
                  # Check if the image tag is unused
                  if ! [[ " ${USED_IMAGES[@]} " =~ " $REPO:$IMAGE_TAG " ]]; then
                      echo "Unused Image: $REPO:$IMAGE_TAG"
                      # Append unused image to the output file
                      echo "$REPO:$IMAGE_TAG" >> unused_images.txt
                  fi
              fi
          done
      done
