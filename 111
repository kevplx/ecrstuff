stages:
  - prepare
  - process

variables:
  AWS_REGION: "us-west-2"
  CURRENT_ENV: "qac"  # This will be dynamically set based on the environment (e.g., dev, test, prod)
  GITLAB_API_URL: "https://gitlab.example.com"  # Replace with your GitLab instance URL

# Prepare stage: Query AWS Secrets Manager, download Secure Files, and unzip them
prepare_files:
  stage: prepare
  script:
    - echo "Preparing files and secrets"
    
    # Query AWS Secrets Manager to get all secrets starting with "dc-ric-sectrans-secret-"
    - echo "Querying AWS Secrets Manager for secrets starting with 'dc-ric-sectrans-secret-'"
    - |
      # Get all secrets that start with 'dc-ric-sectrans-secret-' and format the output using jq
      SECRETS=$(aws secretsmanager list-secrets --query "SecretList[?Name.starts_with(@, 'dc-ric-sectrans-secret-')].Name" --output json)
      echo "Secrets found:"
      
      # Use jq to format and list each secret in a readable way (one per line)
      echo "$SECRETS" | jq -r '.[]'  # This will output each secret on a new line

    # Loop through the secrets and process each one
    - |
      for secret_name in $(echo "$SECRETS" | jq -r '.[]'); do
        # Extract folder name (e.g., "ABC" from "dc-ric-sectrans-secret-dev.TO.ABC")
        folder=$(echo $secret_name | sed -E 's/.*\.TO\.(.*)/\1/')
        
        # Construct the GitLab variable name for the password (e.g., dev_QA_TO_ABC)
        password_var="${CURRENT_ENV}_QA_TO_${folder//./_}"
        echo "Retrieving password for ${password_var}"

        # Check if the password exists in GitLab CI/CD variables
        if [ -z "${!password_var}" ]; then
          echo "No password found matching ${password_var}, skipping..."
          continue  # Skip to the next secret
        else
          PASSWORD="${!password_var}"
          echo "Password retrieved for ${folder}"
        fi

        # Construct the Secure Files zip name (e.g., QAC.QA.TO.ABC.zip)
        zip_file_name="${CURRENT_ENV}.QA.TO.${folder}.zip"
        echo "Downloading zip file: ${zip_file_name}"

        # Get Project ID (if needed for API calls)
        PROJECT_ID=$(curl --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "$GITLAB_API_URL/api/v4/projects?search=your_project_name" | jq -r '.[0].id')

        # Get the file ID for the zip file from GitLab Secure Files
        FILE_ID=$(curl --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" "$GITLAB_API_URL/api/v4/projects/$PROJECT_ID/uploads" | jq -r '.[] | select(.path | contains("'${zip_file_name}'")) | .id')

        # Download the zip file if it exists
        if [ -z "$FILE_ID" ]; then
          echo "No zip file found matching ${zip_file_name}, skipping..."
          continue  # Skip to the next secret
        else
          curl --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" --output "$zip_file_name" "$GITLAB_API_URL/api/v4/projects/$PROJECT_ID/uploads/$FILE_ID"
          echo "Downloaded zip file: ${zip_file_name}"
        fi
        
        # Unzip the downloaded certificate files
        unzip "$zip_file_name" -d "certificates/${folder}/"
        echo "Unzipped certificate files for ${folder}"

        # Process and rename the certificates based on the naming convention
        for cert_file in certificates/${folder}/*.p12; do
          if [[ "$cert_file" == *"cdric"* ]]; then
            new_name="qac${cert_file#*.}"
            mv "$cert_file" "certificates/${folder}/$new_name"
            echo "Renamed $cert_file to $new_name"
          elif [[ "$cert_file" == *"cdrice"* ]]; then
            new_name="qae${cert_file#*.}"
            mv "$cert_file" "certificates/${folder}/$new_name"
            echo "Renamed $cert_file to $new_name"
          elif [[ "$cert_file" == *"cdricf"* ]]; then
            new_name="qaf${cert_file#*.}"
            mv "$cert_file" "certificates/${folder}/$new_name"
            echo "Renamed $cert_file to $new_name"
          fi
        done

        # Echo the list of renamed certificate files
        echo "Renamed certificate files for ${folder}:"
        ls certificates/${folder}
      done
