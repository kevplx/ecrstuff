stages:
  - list_image

list_image:
  stage: list_image
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
    - |
      ECR_NAMESPACE="kc-abc"
      REPOS=$(aws ecr describe-repositories --repository-names $(aws ecr describe-repositories --query "repositories[].repositoryName" --output text) --query "repositories[].repositoryName" --output text | grep "^$ECR_NAMESPACE")
      for REPO in $REPOS; do
          IMAGE_TAGS=$(aws ecr list-images --repository-name $REPO --query 'imageIds[*]' --output json)
          for IMAGE_TAG in $IMAGE_TAGS; do
              if [[ "$IMAGE_TAG" == "null" ]]; then
                  IMAGE_TAG="none"
              fi
              SERVICES=$(aws ecs list-services --cluster <your-ecs-cluster-name> --query "serviceArns[*]" --output text --region <your-region> | xargs -n 1 aws ecs describe-services --services | jq -r ".services[].taskDefinition")
              for SERVICE in $SERVICES; do
                  TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $SERVICE)
                  if [[ $(echo "$TASK_DEFINITION" | grep "$REPO:$IMAGE_TAG") == "" ]]; then
                      echo "Unused Image: $REPO:$IMAGE_TAG"
                  fi
              done
          done
      done
stages:
  - list_image

list_image:
  stage: list_image
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
    - |
      ECR_NAMESPACE="kc-abc"
      REPOS=$(aws ecr describe-repositories --repository-names $(aws ecr describe-repositories --query "repositories[].repositoryName" --output text) --query "repositories[].repositoryName" --output text | grep "^$ECR_NAMESPACE")
      for REPO in $REPOS; do
          IMAGE_TAGS=$(aws ecr list-images --repository-name $REPO --query 'imageIds[*].imageTag' --output text)
          if [[ -z "$IMAGE_TAGS" ]]; then
              IMAGE_TAGS="none"
          fi
          for IMAGE_TAG in $IMAGE_TAGS; do
              SERVICES=$(aws ecs list-services --cluster <your-ecs-cluster-name> --query "serviceArns[*]" --output text --region <your-region> | xargs -n 1 aws ecs describe-services --cluster <your-ecs-cluster-name> --services | jq -r ".services[].taskDefinition")
              for SERVICE in $SERVICES; do
                  TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $SERVICE)
                  if echo "$TASK_DEFINITION" | grep -q "$REPO:$IMAGE_TAG"; then
                      break 2
                  fi
              done
              echo "Unused Image: $REPO:$IMAGE_TAG"
          done
      done

## image tags in use

stages:
  - list_image

list_image:
  stage: list_image
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
    - |
      ECR_NAMESPACE="kc-abc"
      REPOS=$(aws ecr describe-repositories --repository-names $(aws ecr describe-repositories --query "repositories[].repositoryName" --output text) --query "repositories[].repositoryName" --output text | grep "^$ECR_NAMESPACE")
      for REPO in $REPOS; do
          IMAGE_TAGS=$(aws ecr list-images --repository-name $REPO --query 'imageIds[*].imageTag' --output text)
          if [[ -z "$IMAGE_TAGS" ]]; then
              IMAGE_TAGS="none"
          fi
          for IMAGE_TAG in $IMAGE_TAGS; do
              SERVICES=$(aws ecs list-tasks --cluster <your-ecs-cluster-name> --query 'taskArns[*]' --output text | xargs -n 1 aws ecs describe-tasks --tasks | jq -r '.tasks[].containers[].image' | grep "$REPO:$IMAGE_TAG")
              if [[ -n "$SERVICES" ]]; then
                  echo "Used Image: $REPO:$IMAGE_TAG"
              fi
          done
      done


stages:
  - list_image

list_image:
  stage: list_image
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
    - |
      ECR_NAMESPACE="kc-abc"
      REPOS=$(aws ecr describe-repositories --repository-names $(aws ecr describe-repositories --query "repositories[].repositoryName" --output text) --query "repositories[].repositoryName" --output text | grep "^$ECR_NAMESPACE")
      for REPO in $REPOS; do
          IMAGE_TAGS=$(aws ecr list-images --repository-name $REPO --query 'imageIds[*].imageTag' --output text)
          if [[ -z "$IMAGE_TAGS" ]]; then
              IMAGE_TAGS="none"
          fi
          for IMAGE_TAG in $IMAGE_TAGS; do
              SERVICES=$(aws ecs list-services --cluster <your-ecs-cluster-name> --query "serviceArns[*]" --output text --region <your-region> | xargs -n 1 aws ecs describe-services --cluster <your-ecs-cluster-name> --services | jq -r ".services[].taskDefinition")
              for SERVICE in $SERVICES; do
                  TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $SERVICE)
                  if echo "$TASK_DEFINITION" | grep -q "$REPO:$IMAGE_TAG"; then
                      echo "Used Image: $REPO:$IMAGE_TAG"
                      break
                  fi
              done
          done
      done

## verbose
stages:
  - list_image

list_image:
  stage: list_image
  script: 
    - |
      # Set AWS credentials and region from GitLab CI environment variables
      echo "Setting AWS credentials and region..."
      export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
      export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
      export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
      
      # Retrieve repository names in the ECR namespace
      echo "Retrieving repository names in the ECR namespace..."
      ECR_NAMESPACE="kc-abc"
      REPOS=$(aws ecr describe-repositories --repository-names $(aws ecr describe-repositories --query "repositories[].repositoryName" --output text) --query "repositories[].repositoryName" --output text | grep "^$ECR_NAMESPACE")
      
      # Iterate over each repository
      echo "Iterating over repositories..."
      for REPO in $REPOS; do
          # Get list of image tags in the repository
          echo "Retrieving image tags for repository: $REPO..."
          IMAGE_TAGS=$(aws ecr list-images --repository-name $REPO --query 'imageIds[*].imageTag' --output text)
          
          # If no image tags are present, set IMAGE_TAGS to "none"
          if [[ -z "$IMAGE_TAGS" ]]; then
              IMAGE_TAGS="none"
          fi
          
          # Iterate over each image tag
          for IMAGE_TAG in $IMAGE_TAGS; do
              # Retrieve list of ECS services and their task definitions
              echo "Checking image tag: $IMAGE_TAG for repository: $REPO..."
              SERVICES=$(aws ecs list-services --cluster <your-ecs-cluster-name> --query "serviceArns[*]" --output text --region <your-region> | xargs -n 1 aws ecs describe-services --cluster <your-ecs-cluster-name> --services | jq -r ".services[].taskDefinition")
              
              # Iterate over each service
              for SERVICE in $SERVICES; do
                  # Describe the task definition
                  echo "Describing task definition: $SERVICE..."
                  TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $SERVICE)
                  
                  # Check if the image tag is present in the task definition
                  if echo "$TASK_DEFINITION" | grep -q "$REPO:$IMAGE_TAG"; then
                      # If the image tag is found, print it as a "Used Image" and break the loop
                      echo "Image tag $IMAGE_TAG is being used by ECS task definition: $SERVICE"
                      break
                  fi
              done
          done
      done

## optimized
stages:
  - list_image

list_image:
  stage: list_image
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    - export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
    - |
      ECR_NAMESPACE="kc-abc"
      # Retrieve list of ECS services and their task definitions
      echo "Retrieving ECS services and their task definitions..."
      SERVICES=$(aws ecs list-services --cluster <your-ecs-cluster-name> --query "serviceArns[]" --output text --region <your-region>)
      for SERVICE in $SERVICES; do
          TASK_DEFINITION=$(aws ecs describe-services --cluster <your-ecs-cluster-name> --services $SERVICE --region <your-region> | jq -r ".services[].taskDefinition")
          # Get repository and image tag information from task definitions
          REPO_IMAGE_TAGS=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION --region <your-region> | jq -r '.taskDefinition.containerDefinitions[].image')
          # Check if the image tag is present in the task definition
          for REPO_IMAGE_TAG in $REPO_IMAGE_TAGS; do
              REPO=$(echo $REPO_IMAGE_TAG | cut -d ":" -f 1)
              IMAGE_TAG=$(echo $REPO_IMAGE_TAG | cut -d ":" -f 2)
              echo "Used Image: $REPO:$IMAGE_TAG"
          done
      done

